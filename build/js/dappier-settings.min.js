/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/dappier-settings.js":
/*!************************************!*\
  !*** ./src/js/dappier-settings.js ***!
  \************************************/
/***/ (() => {

document.addEventListener('DOMContentLoaded', function () {
  var aiModel = document.getElementById('aimodel_id');
  var agentAdvanced = document.querySelector('.agent-advanced');
  // const agentName         = document.querySelector('.agent_name');
  // const agentDesc         = document.querySelector('.agent_desc');
  // const agentPersona      = document.querySelector('.agent_persona');
  var agentNameInput = document.getElementById('agent_name');
  var agentDescInput = document.getElementById('agent_desc');
  var agentPersonaInput = document.getElementById('agent_persona');
  var colorFields = document.querySelectorAll('.dappier-color-picker');
  var fieldsHidden = true;

  // If no agent value, that means some agents exist but none have been chosen. Hide fields.
  if (!aiModel.value) {
    hideFields();
    fieldsHidden = true;
  }

  // Hide/show the create agent fields.
  document.getElementById('aimodel_id').addEventListener('change', function () {
    // If there is a value.
    if (aiModel.value) {
      // If the fields are hidden, show them.
      if (fieldsHidden) {
        fieldsHidden = false;
        showFields();
      }

      // If creating a new agent, clear the fields.
      if ('_create_agent' === aiModel.value) {
        agentNameInput.value = '';
        agentDescInput.value = '';
        agentPersonaInput.value = '';
      }
      // Selecting an existing, get the agent data.
      else {
        // Temp disable fields.
        agentNameInput.disabled = true;
        agentDescInput.disabled = true;
        agentPersonaInput.disabled = true;

        // Run ajax to get the agent data.
        jQuery.ajax({
          url: dappierSettings.ajaxUrl,
          type: 'POST',
          data: {
            action: 'dappier_get_agent_data',
            api_key: document.getElementById('api_key').value,
            aimodel_id: aiModel.value
          },
          success: function success(response) {
            // If successful, populate the fields.
            if (response.success) {
              agentNameInput.value = response.data.name;
              agentDescInput.value = response.data.description;
              agentPersonaInput.value = response.data.persona;
            }

            // Re-enable fields.
            agentNameInput.disabled = false;
            agentDescInput.disabled = false;
            agentPersonaInput.disabled = false;
          },
          error: function error(response) {
            console.log(response);
          }
        });
      }
    }
    // No value, make sure fields are hidden.
    else {
      hideFields();
      fieldsHidden = true;
    }
  });

  // If we have color fields.
  if (colorFields.length) {
    // Initialize them.
    colorFields.forEach(function (field) {
      jQuery(field).wpColorPicker();
    });
  }

  // Function to show fields.
  function showFields() {
    agentAdvanced.setAttribute('open', '');
  }

  // Function to hide fields.
  function hideFields() {
    agentAdvanced.removeAttribute('open');
  }
});
jQuery(function ($) {
  // On upload button click.
  $('body').on('click', '.dappier-media__upload', function (event) {
    event.preventDefault(); // prevent default link click and page refresh

    var button = $(this);
    var imageId = button.next().next().val();
    var customUploader = wp.media({
      title: dappierSettings.uploaderTitle,
      library: {
        type: 'image'
      },
      button: {
        text: dappierSettings.buttonText
      },
      multiple: false
    }).on('select', function () {
      // it also has "open" and "close" events
      var attachment = customUploader.state().get('selection').first().toJSON();
      button.removeClass('button').html('<img src="' + attachment.url + '">');
      button.next().show(); // show "Remove image" link.
      button.next().next().val(attachment.id); // Populate the hidden field with image ID.
    });

    // Handle already selected images.
    customUploader.on('open', function () {
      if (!imageId) {
        return;
      }
      var selection = customUploader.state().get('selection');
      attachment = wp.media.attachment(imageId);
      attachment.fetch();
      selection.add(attachment ? [attachment] : []);
    });

    // Open the uploader.
    customUploader.open();
  });

  // on remove button click
  $('body').on('click', '.dappier-media__remove', function (event) {
    event.preventDefault();
    var button = $(this);
    button.next().val(''); // emptying the hidden field
    button.hide().prev().addClass('button').html('Upload image'); // replace the image with text
  });
});

/***/ }),

/***/ "./src/css/dappier-settings.css":
/*!**************************************!*\
  !*** ./src/css/dappier-settings.css ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/build/js/dappier-settings.min": 0,
/******/ 			"build/css/dappier-settings.min": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkdappier"] = self["webpackChunkdappier"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["build/css/dappier-settings.min"], () => (__webpack_require__("./src/js/dappier-settings.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["build/css/dappier-settings.min"], () => (__webpack_require__("./src/css/dappier-settings.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;